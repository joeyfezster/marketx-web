{"version":3,"sources":["pages/auth/state/authActions.ts","pages/home/HomePage.tsx","shared/routePaths.ts","pages/auth/styles.ts","pages/auth/forms/SigninForm.tsx","pages/auth/SigninPage.tsx","pages/auth/forms/SignupForm.tsx","pages/auth/SignupPage.tsx","shared/utils/loginUtils.ts","shared/apiPaths.ts","pages/auth/state/authApis.ts","pages/auth/state/authSagas.ts","rootSagas.ts","pages/auth/state/authReducer.ts","rootReducers.ts","store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AuthActionTypes","HomePage","to","routePaths","ROOT","SIGNIN","SIGNUP","authStyles","makeStyles","theme","createStyles","root","form","display","flexDirection","maxWidth","margin","formHeader","justifyContent","formItem","marginTop","withFormik","mapPropsToValues","email","password","validate","values","errors","handleSubmit","setSubmitting","props","onSubmit","data","identifier","onSuccess","displayName","setFieldValue","classes","className","Typography","variant","TextField","required","name","label","defaultValue","onChange","event","target","value","Button","type","color","SigninPage","dispatch","useDispatch","history","useHistory","payload","LOGIN_USER","LoginUserAction","push","username","confirmPassword","SignupPage","REGISTER_USER","RegisterUserAction","TOKEN_KEY","saveUserJWT","jwt","localStorage","setItem","baseUrl","process","apiPaths","LOGIN","REGISTER","loginUserApi","axios","post","registerUserApi","loginUser","loginUserSaga","registerUser","registerUserSaga","authSagas","action","put","LOGIN_USER_PENDING","call","user","LOGIN_USER_FULFILLED","error","response","message","Array","isArray","messages","LOGIN_USER_REJECTED","onError","takeEvery","REGISTER_USER_PENDING","userRegistrationResponse","REGISTER_USER_FULFILLED","REGISTER_USER_REJECTED","all","rootSaga","fork","authReducer","produce","draft","userLogin","pending","fulfilled","rejected","loggedInUser","userRegistration","rootReducer","combineReducers","authState","persistConfig","key","storage","whitelist","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","composed","composeWithDevTools","persistedReducer","persistReducer","rootReducers","store","createStore","persistor","persistStore","run","App","loading","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a34f448.chunk.js","sourcesContent":["import {\n  UserResponse,\n  LoginUserPayload,\n  RegisterUserPayload,\n} from './types'\n\nexport enum AuthActionTypes {\n  LOGIN_USER = 'LOGIN_USER',\n  LOGIN_USER_PENDING = 'LOGIN_USER_PENDING',\n  LOGIN_USER_FULFILLED = 'LOGIN_USER_FULFILLED',\n  LOGIN_USER_REJECTED = 'LOGIN_USER_REJECTED',\n  REGISTER_USER = 'REGISTER_USER',\n  REGISTER_USER_PENDING = 'REGISTER_USER_PENDING',\n  REGISTER_USER_FULFILLED = 'REGISTER_USER_FULFILLED',\n  REGISTER_USER_REJECTED = 'REGISTER_USER_REJECTED',\n}\n\n/************************* Action Interfaces ******************************/\n\nexport interface LoginUserActionType {\n  type: AuthActionTypes.LOGIN_USER\n  payload: LoginUserPayload\n}\n\nexport interface LoginUserPendingActionType {\n  type: AuthActionTypes.LOGIN_USER_PENDING\n}\n\nexport interface LoginUserFulfilledActionType {\n  type: AuthActionTypes.LOGIN_USER_FULFILLED\n  data: UserResponse\n}\n\nexport interface LoginUserRejectedActionType {\n  type: AuthActionTypes.LOGIN_USER_REJECTED\n  error: string\n}\n\nexport interface RegisterUserActionType {\n  type: AuthActionTypes.REGISTER_USER\n  payload: RegisterUserPayload\n}\n\nexport interface RegisterUserPendingActionType {\n  type: AuthActionTypes.REGISTER_USER_PENDING\n}\n\nexport interface RegisterUserFulfilledActionType {\n  type: AuthActionTypes.REGISTER_USER_FULFILLED\n  data: UserResponse\n}\n\nexport interface RegisterUserRejectedActionType {\n  type: AuthActionTypes.REGISTER_USER_REJECTED\n  error: string\n}\n\n/************************* Action Constructors ******************************/\n\nexport const LoginUserAction = (payload: LoginUserPayload): LoginUserActionType => ({\n  type: AuthActionTypes.LOGIN_USER,\n  payload,\n})\n\nexport const LoginUserPendingAction = (): LoginUserPendingActionType => ({\n  type: AuthActionTypes.LOGIN_USER_PENDING,\n})\nexport const LoginUserFulfilledAction = (data: UserResponse): LoginUserFulfilledActionType => ({\n  type: AuthActionTypes.LOGIN_USER_FULFILLED,\n  data,\n})\nexport const LoginUserRejectedAction = (error: string): LoginUserRejectedActionType => ({\n  type: AuthActionTypes.LOGIN_USER_REJECTED,\n  error,\n})\n\nexport const RegisterUserAction = (payload: RegisterUserPayload): RegisterUserActionType => ({\n  type: AuthActionTypes.REGISTER_USER,\n  payload,\n})\n\nexport const RegisterUserPendingAction = (): RegisterUserPendingActionType => ({\n  type: AuthActionTypes.REGISTER_USER_PENDING,\n})\nexport const RegisterUserFulfilledAction = (data: UserResponse): RegisterUserFulfilledActionType => ({\n  type: AuthActionTypes.REGISTER_USER_FULFILLED,\n  data,\n})\nexport const RegisterUserRejectedAction = (error: string): RegisterUserRejectedActionType => ({\n  type: AuthActionTypes.REGISTER_USER_REJECTED,\n  error,\n})\n\n/************************* Type Composition ******************************/\n\nexport type AuthAction =\n  | LoginUserActionType\n  | LoginUserPendingActionType\n  | LoginUserFulfilledActionType\n  | LoginUserRejectedActionType\n  | RegisterUserActionType\n  | RegisterUserPendingActionType\n  | RegisterUserFulfilledActionType\n  | RegisterUserRejectedActionType\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nconst HomePage = () => {\n    return (\n        <Link to=\"signin\">Sign in</Link>\n    );\n}\n\nexport default HomePage;\n","const routePaths = {\n    ROOT: '/',\n    SIGNIN: '/signin',\n    SIGNUP: '/signup'\n}\n\nexport default routePaths\n","import { Theme } from '@material-ui/core/styles'\nimport { createStyles, makeStyles } from '@material-ui/styles'\n\nexport const authStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    form: {\n      display: 'flex',\n      flexDirection: 'column',\n      maxWidth: '400px',\n      margin: 'auto',\n    },\n    formHeader: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    formItem: {\n      marginTop: '15px'\n    }\n  }),\n)\n","import React from 'react';\nimport { withFormik, FormikProps, Form } from 'formik';\n\nimport { Link } from 'react-router-dom';\nimport { LoginUserPayload } from '../state/types'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { authStyles } from '../styles'\n\ntype SigninFormProps = {\n    onSubmit: (payload: LoginUserPayload) => void\n    onSuccess: () => void\n}\n\ntype FormValues = {\n    email: string\n    password: string\n}\n\nconst SigninForm = (props: SigninFormProps & FormikProps<FormValues>) => {\n    const {\n        setFieldValue\n    } = props;\n    const classes = authStyles()\n    return (\n        <Form className={classes.form}>\n            <div className={classes.formHeader}>\n                <Typography variant=\"h5\">Sign in</Typography>\n            </div>\n            <TextField\n                className={classes.formItem}\n                required\n                name=\"email\"\n                label=\"Email Address\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('email', event.target.value, false)\n                }}\n            />\n            <TextField\n                className={classes.formItem}\n                required\n                name=\"password\"\n                label=\"Password\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('password', event.target.value, false)\n                }}\n            />\n            <Button\n                className={classes.formItem}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                SIGN IN\n                </Button>\n            <Link\n                className={classes.formItem}\n                to=\"/signup\"\n            >\n                Don't have an account? Sign up\n                </Link>\n        </Form>\n    );\n}\n\nexport default withFormik<SigninFormProps, FormValues>({\n    mapPropsToValues: () => ({\n        email: '',\n        password: '',\n    }),\n    validate: values => {\n        const errors: Record<string, string> = {};\n\n        if (!values.email) {\n            errors.email = 'Required';\n        }\n        if (!values.password) {\n            errors.password = 'Required';\n        }\n\n        return errors;\n    },\n\n    handleSubmit: (values, { setSubmitting, props }) => {\n        props.onSubmit({\n            data: {\n                identifier: values.email,\n                password: values.password,\n            },\n            onSuccess: () => {\n                props.onSuccess()\n                setSubmitting(false)\n            },\n        })\n    },\n\n    displayName: 'SigninForm',\n})(SigninForm);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport routePaths from 'shared/routePaths'\nimport { LoginUserAction } from './state/authActions'\nimport SigninForm from './forms/SigninForm'\nimport { LoginUserPayload } from './state/types'\nimport { authStyles } from './styles'\n\nconst SigninPage = () => {\n    const classes = authStyles()\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    const onSigninSubmit = (payload: LoginUserPayload) => {\n        dispatch(LoginUserAction(payload))\n    }\n    const onSigninSuccess = () => {\n        history.push(routePaths.ROOT)\n    }\n\n    return (\n        <div className={classes.root}>\n            <SigninForm onSubmit={onSigninSubmit} onSuccess={onSigninSuccess} />\n        </div>\n    );\n}\n\nexport default SigninPage;\n","import React from 'react';\nimport { withFormik, FormikProps, Form } from 'formik';\n\nimport { Link } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { RegisterUserPayload } from '../state/types'\nimport { authStyles } from '../styles'\n\ntype SignupFormProps = {\n    onSubmit: (payload: RegisterUserPayload) => void\n    onSuccess: () => void\n}\n\ntype FormValues = {\n    name: string\n    username: string\n    email: string\n    password: string\n    confirmPassword: string\n}\n\nconst SignupForm = (props: SignupFormProps & FormikProps<FormValues>) => {\n    const {\n        setFieldValue\n    } = props;\n    const classes = authStyles()\n    return (\n        <Form className={classes.form}>\n            <div className={classes.formHeader}>\n                <Typography variant=\"h5\">Register</Typography>\n            </div>\n            <TextField\n                className={classes.formItem}\n                required\n                name=\"name\"\n                label=\"Name\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('name', event.target.value, false)\n                }}\n            />\n            <TextField\n                className={classes.formItem}\n                required\n                name=\"username\"\n                label=\"Username\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('username', event.target.value, false)\n                }}\n            />\n            <TextField\n                className={classes.formItem}\n                required\n                name=\"email\"\n                label=\"Email Address\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('email', event.target.value, false)\n                }}\n            />\n            <TextField\n                type=\"password\"\n                className={classes.formItem}\n                required\n                name=\"password\"\n                label=\"Password\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('password', event.target.value, false)\n                }}\n            />\n            <TextField\n                type=\"password\"\n                className={classes.formItem}\n                required\n                name=\"confirmPassword\"\n                label=\"Confirm Password\"\n                defaultValue=\"\"\n                variant=\"outlined\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    setFieldValue('confirmPassword', event.target.value, false)\n                }}\n            />\n            <Button\n                className={classes.formItem}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                SIGN UP\n                </Button>\n            <Link\n                className={classes.formItem}\n                to=\"/signin\"\n            >\n                Already have an account? Sign in\n                </Link>\n        </Form>\n    );\n}\n\nexport default withFormik<SignupFormProps, FormValues>({\n    mapPropsToValues: () => ({\n        name: '',\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n    }),\n    validate: values => {\n        const errors: Record<string, string> = {};\n\n        if (!values.name) {\n            errors.name = 'Required';\n        }\n        if (!values.username) {\n            errors.username = 'Required';\n        }\n        if (!values.email) {\n            errors.email = 'Required';\n        }\n        if (!values.password) {\n            errors.password = 'Required';\n        }\n        if (!values.confirmPassword) {\n            errors.confirmPassword = 'Required';\n        }\n\n        return errors;\n    },\n\n    handleSubmit: (values, { setSubmitting, props }) => {\n        props.onSubmit({\n            data: {\n                name: values.name,\n                username: values.username,\n                email: values.email,\n                password: values.password\n            },\n            onSuccess: () => {\n                props.onSuccess()\n                setSubmitting(false)\n            },\n        })\n    },\n\n    displayName: 'SignupForm',\n})(SignupForm);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport routePaths from 'shared/routePaths'\nimport { RegisterUserAction } from './state/authActions'\nimport SignupForm from './forms/SignupForm'\nimport { RegisterUserPayload } from './state/types'\nimport { authStyles } from './styles'\n\n\nconst SignupPage = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const classes = authStyles();\n\n    const onSignupSubmit = (payload: RegisterUserPayload) => {\n        dispatch(RegisterUserAction(payload))\n    }\n    const onSignupSuccess = () => {\n        history.push(routePaths.ROOT)\n    }\n\n    return (\n        <div className={classes.root}>\n            <SignupForm onSubmit={onSignupSubmit} onSuccess={onSignupSuccess} />\n        </div>\n    );\n}\n\nexport default SignupPage;\n","const TOKEN_KEY = 'jwt'\n\n// TODO: secure this, don't save jwt on local storage\nexport const saveUserJWT = (jwt: string) => {\n  localStorage.setItem(TOKEN_KEY, jwt)\n}\n\nexport const getUserJWT = () => {\n  return localStorage.getItem(TOKEN_KEY) || ''\n}\n\nexport const invalidateJWT = () => {\n  localStorage.removeItem(TOKEN_KEY)\n}\n\nexport const doesJWTExist = () => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true\n  }\n\n  return false\n}\n","const baseUrl = process.env.REACT_APP_API_BASEURL\n\nconst apiPaths = {\n  LOGIN: `${baseUrl}/auth/local`,\n  REGISTER: `${baseUrl}/auth/local/register`,\n}\n\nexport default apiPaths\n","import axios from 'axios'\nimport apiPaths from 'shared/apiPaths'\nimport { RegisterUserApiData } from './types'\n\nexport const loginUserApi = (identifier: string, password: string) =>\n  axios.post(apiPaths.LOGIN, {\n    identifier,\n    password,\n  })\n\nexport const registerUserApi = (data: RegisterUserApiData) => axios.post(apiPaths.REGISTER, data)\n","import { call, put, takeEvery, all } from 'redux-saga/effects'\n\nimport { saveUserJWT } from 'shared/utils/loginUtils'\nimport {\n  AuthActionTypes,\n  LoginUserActionType,\n  RegisterUserActionType,\n} from './authActions'\nimport {\n  loginUserApi,\n  registerUserApi,\n} from './authApis'\n\nfunction* loginUser(action: LoginUserActionType): any {\n  yield put({ type: AuthActionTypes.LOGIN_USER_PENDING })\n  try {\n    const user = yield call(loginUserApi, action.payload?.data?.identifier, action.payload?.data?.password)\n    saveUserJWT(user.data.jwt)\n    yield put({ type: AuthActionTypes.LOGIN_USER_FULFILLED, data: user.data.user })\n    action.payload.onSuccess && action.payload.onSuccess()\n  } catch (e) {\n    let error = e.response?.data?.message\n    if (Array.isArray(error)) {\n      error = e.response?.data?.message[0]?.messages[0]?.message\n    }\n    yield put({ type: AuthActionTypes.LOGIN_USER_REJECTED, error })\n    action.payload.onError && action.payload.onError(error)\n  }\n}\n\nfunction* loginUserSaga() {\n  yield takeEvery(AuthActionTypes.LOGIN_USER, loginUser)\n}\n\nfunction* registerUser(action: RegisterUserActionType): any {\n  yield put({ type: AuthActionTypes.REGISTER_USER_PENDING })\n  try {\n    const userRegistrationResponse = yield call(registerUserApi, action.payload?.data)\n    yield put({ type: AuthActionTypes.REGISTER_USER_FULFILLED, data: userRegistrationResponse.data.user })\n    saveUserJWT(userRegistrationResponse.data.jwt)\n    action.payload.onSuccess && action.payload.onSuccess()\n  } catch (e) {\n    let error = e.response?.data?.message\n    if (Array.isArray(error)) {\n      error = e.response?.data?.message[0]?.messages[0]?.message\n    }\n    yield put({\n      type: AuthActionTypes.REGISTER_USER_REJECTED,\n      error,\n    })\n    action.payload.onError && action.payload.onError(error)\n  }\n}\n\nfunction* registerUserSaga() {\n  yield takeEvery(AuthActionTypes.REGISTER_USER, registerUser)\n}\n\nexport default function* authSagas() {\n  yield all([loginUserSaga(), registerUserSaga()])\n}\n","import { all, fork } from 'redux-saga/effects'\nimport authSagas from 'pages/auth/state/authSagas'\n\nexport default function* rootSaga() {\n  yield all([fork(authSagas)])\n}\n","import produce, { Draft } from 'immer'\nimport { Reducer } from 'redux'\n\nimport { AuthAction, AuthActionTypes } from './authActions'\nimport { UserResponse } from './types'\n\nexport type AuthState = {\n  loggedInUser: {\n    data: UserResponse | null\n  }\n  userLogin: {\n    pending: boolean\n    fulfilled: boolean\n    rejected: boolean\n    error: string | ''\n  }\n  userRegistration: {\n    pending: boolean\n    fulfilled: boolean\n    rejected: boolean\n    error: string | ''\n  }\n}\n\nexport const initialState: AuthState = {\n  loggedInUser: {\n    data: null,\n  },\n  userLogin: {\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n    error: '',\n  },\n  userRegistration: {\n    pending: false,\n    fulfilled: false,\n    rejected: false,\n    error: '',\n  },\n}\n\nexport const authReducer: Reducer<AuthState, AuthAction> = produce((draft: StateDraft, action: AuthAction) => {\n  switch (action.type) {\n    case AuthActionTypes.LOGIN_USER_PENDING:\n      draft.userLogin.pending = true\n      draft.userLogin.fulfilled = false\n      draft.userLogin.rejected = false\n      draft.userLogin.error = ''\n      draft.loggedInUser.data = null\n      break\n    case AuthActionTypes.LOGIN_USER_FULFILLED:\n      draft.userLogin.pending = false\n      draft.userLogin.fulfilled = true\n      draft.userLogin.rejected = false\n      draft.userLogin.error = ''\n      draft.loggedInUser.data = action.data\n      break\n    case AuthActionTypes.LOGIN_USER_REJECTED:\n      draft.userLogin.pending = false\n      draft.userLogin.fulfilled = false\n      draft.userLogin.rejected = true\n      draft.userLogin.error = action.error\n      draft.loggedInUser.data = null\n      break\n\n    case AuthActionTypes.REGISTER_USER_PENDING:\n      draft.userRegistration.pending = true\n      draft.userRegistration.fulfilled = false\n      draft.userRegistration.rejected = false\n      draft.userRegistration.error = ''\n      draft.loggedInUser.data = null\n      break\n    case AuthActionTypes.REGISTER_USER_FULFILLED:\n      draft.userRegistration.pending = false\n      draft.userRegistration.fulfilled = true\n      draft.userRegistration.rejected = false\n      draft.userRegistration.error = ''\n      draft.loggedInUser.data = action.data\n      break\n    case AuthActionTypes.REGISTER_USER_REJECTED:\n      draft.userRegistration.pending = false\n      draft.userRegistration.fulfilled = false\n      draft.userRegistration.rejected = true\n      draft.userRegistration.error = action.error\n      draft.loggedInUser.data = null\n      break\n  }\n}, initialState)\n\ntype StateDraft = Draft<AuthState>\n","import { combineReducers } from 'redux'\nimport { authReducer } from 'pages/auth/state/authReducer'\n\nconst rootReducer = combineReducers({\n  authState: authReducer,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware, { SagaMiddleware } from 'redux-saga'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootSaga from './rootSagas'\nimport rootReducers from './rootReducers'\nimport { useDispatch } from 'react-redux'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [],\n}\n\nconst sagaMiddleware = createSagaMiddleware() as SagaMiddleware<RootState>\nconst middleware = applyMiddleware(sagaMiddleware)\nconst composed = composeWithDevTools(middleware)\n\nconst persistedReducer = persistReducer(persistConfig, rootReducers)\n\nexport const store = createStore(persistedReducer, composed)\nexport const persistor = persistStore(store)\nsagaMiddleware.run(rootSaga)\n\nexport type RootState = ReturnType<typeof rootReducers>\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport HomePage from 'pages/home/HomePage';\nimport SigninPage from 'pages/auth/SigninPage';\nimport SignupPage from 'pages/auth/SignupPage';\nimport { store, persistor } from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact component={HomePage} />\n            <Route path=\"/signin\" exact component={SigninPage} />\n            <Route path=\"/signup\" exact component={SignupPage} />\n          </Switch>\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}